"" ========================================================
"" Base Settings
"" ========================================================
set scrolloff=10
set history=1000
set number relativenumber
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell

" Clipboard Integration
set clipboard+=unnamed

" Leader Key
let mapleader="\<space>"

"Default Behavior
set gdefault

" iIdeaVim Specific Settings
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray


"" ========================================================
"" Plugin Settings
"" ========================================================
set exchange
set commentary
set ReplaceWithRegister
set surround
set nerdtree
set textobj-indent

" Searching Plugins
set easymotion
let g:EasyMotion_override_acejump = 0
nmap s <Plug>(easymotion-f)
nmap S <Plug>(easymotion-F)

" Highlighting Plugins
set highlightedyank
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Object Plugins
set textobj-entire
set indent-object
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

" Which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 20
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "false"


"" ========================================================
"" Key Mappings
"" ========================================================

nmap <leader>vr <Action>(IdeaVim.ReloadVimRc.reload)
let g:WhichKeyDesc_vim_reload = "<leader>vr Source .ideavimrc"



// Pane Navigation
nnoremap <C-Left> <C-w>h
nnoremap <C-Right> <C-w>l
nnoremap <C-Up> <C-w>k
nnoremap <C-Down> <C-w>j
nmap <leader>wv <Action>(SplitVertically)
nmap <leader>wh <Action>(SplitHorizontally)
nmap <leader>! <Action>(SplitVertically)
nmap <leader>- <Action>(SplitHorizontally)
nmap <leader>wu <Action>(Unsplit)
nmap <leader>wm <Action>(MoveEditorToOppositeTabGroup)
nmap <leader>wb <Action>(Back)
nmap <leader>wf <Action>(Forward)
let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>! Split window vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>- Split window horizontally"
let g:WhichKeyDesc_window_split_vertically_1 = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally_1 = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"

// Navigation actions
nmap <C-i> <Action>(Back)
nmap <C-o> <Action>(Forward)

// Tabs
nmap <leader>tp <Action>(PinActiveEditorTab)
nmap <C-p> <Action>(PreviousTab)
nmap <C-n> <Action>(NextTab)
nmap <leader>t1 <Action>(GoToTab1)
nmap <leader>t2 <Action>(GoToTab2)
nmap <leader>t3 <Action>(GoToTab3)
nmap <leader>t4 <Action>(GoToTab4)
nmap <leader>t5 <Action>(GoToTab5)
nmap <leader>t6 <Action>(GoToTab6)
nmap <leader>t7 <Action>(GoToTab7)
nmap <leader>t8 <Action>(GoToTab8)
nmap <leader>t9 <Action>(GoToTab9)
nmap <leader>tx <Action>(CloseContent)
nmap <leader>tX <Action>(CloseAllEditors)
nmap <leader>ta <Action>(CloseAllEditorsButActive)
nmap <leader>tp <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs = "<leader>t Tabs"
let g:WhichKeyDesc_tabs_pin = "<leader>tp Pin Active Tab"
let g:WhichKeyDesc_tabs_go_to = "<leader>tg Go to Tab"
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>t1 Go to Tab 1"
let g:WhichKeyDesc_tabs_go_to_2 = "<leader>t2 Go to Tab 2"
let g:WhichKeyDesc_tabs_go_to_3 = "<leader>t3 Go to Tab 3"
let g:WhichKeyDesc_tabs_go_to_4 = "<leader>t4 Go to Tab 4"
let g:WhichKeyDesc_tabs_go_to_5 = "<leader>t5 Go to Tab 5"
let g:WhichKeyDesc_tabs_go_to_6 = "<leader>t6 Go to Tab 6"
let g:WhichKeyDesc_tabs_go_to_7 = "<leader>t7 Go to Tab 7"
let g:WhichKeyDesc_tabs_go_to_8 = "<leader>t8 Go to Tab 8"
let g:WhichKeyDesc_tabs_go_to_9 = "<leader>t9 Go to Tab 9"
let g:WhichKeyDesc_tabs_close = "<leader>tx Close Current Tab"
let g:WhichKeyDesc_tabs_close_all = "<leader>tX Close All Tabs"
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>ta Close All Tabs But Active"
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>tp Close All Unpinned Tabs"

// File Navigation and Management
nmap <leader>ff <Action>(GotoFile)
nmap <leader><leader> <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>fg <Action>(FindInPath)
nmap <leader>fl <Action>(RecentLocations)
nmap <leader>fs <Action>(NewScratchFile)
nmap <leader>e :NERDTreeFocus<CR>
nmap <leader>fo <Action>(OpenFile)
nmap <leader>fy <Action>(CopyAbsolutePath)
nmap <leader>fp <Action>(ManageRecentProjects)
nmap <leader>fh <Action>(LocalHistory.ShowHistory)
nmap <leader>fd <Action>(ShowFilePath)
nmap <leader>fi <Action>(SelectIn)
nmap <leader>fp <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"
let g:WhichKeyDesc_file_opt_goto_file = "<leader>fg Go To File"
let g:WhichKeyDesc_file_opt_goto_file = "<leader><leader> Go To File"
let g:WhichKeyDesc_file_opt_goto_content = "<leader>fg Find In Files"
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>e Toggle NERDTree"
let g:WhichKeyDesc_file_opt_open_file = "<leader>fo Open File"
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Absolute Path"
let g:WhichKeyDesc_file_opt_recent_projects = "<leader>fp Manage Recent Projects"
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show Local History"
let g:WhichKeyDesc_file_opt_show_path = "<leader>fd Show File Path"
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fp Replace In Path"

// Display Mode Commands
map <leader>Dd <Action>(ToggleDistractionFreeMode)
map <leader>Dz <Action>(ToggleZenMode)
map <leader>Df <Action>(ToggleFullScreen)
let g:WhichKeyDesc_display = "<leader>D Display options"
let g:WhichKeyDesc_zen_mode = "<leader>Dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>Dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>Df Toggle full screen"

// Selection

vmap v <Action>(EditorSelectWord)
vmap <Bs> <Action>(EditorUnSelectWord)
